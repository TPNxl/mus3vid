"""
Utils for Mus3Vid: Folder setup, key/prompt loading, and data models.
"""

import os
from typing import List, Dict
from pydantic import BaseModel
from pydantic_ai.models.gemini import GeminiModel
from pydantic_ai.providers.google_gla import GoogleGLAProvider

# === Folder paths ===
INPUT_FILES_FOLDER = "input_files"
OUTPUT_FILES_FOLDER = "output_files"
KEYS_FOLDER = "keys"
PROMPTS_FOLDER = "prompts"

# === LLM params ===
LLM_MODEL_NAME = "gemini-2.5-pro-exp-03-25"

# === Video generation params ===
VEO_MODEL_NAME = "veo-2.0-generate-001"
ALLOW_HUMAN_GENERATION = True   # Whether to allow human generation in videos
ASPECT_RATIO = "16:9"           # or "9:16" for default
OUTPUT_VIDEO_DIM = (1280, 720)  # Set to the output dimensions of the selected aspect ratio and video generation model, in case of default black screens
MIN_CLIP_LEN = 5                # Minimum video clip length in seconds for the model (default 5)
MAX_CLIP_LEN = 8                # Maximum video clip length in seconds for the model (default 8), longer requests are truncated
MAX_VIDEOS_GEN = 2              # Maximum concurrent video generations, to avoid API rate limits or throttling (default 2 for Tier 1 users)

def load_keys() -> Dict[str, str]:
    """
    Load API keys from the KEYS_FOLDER.

    Returns:
        Dict[str, str]: Mapping of key names to their contents.
    """
    keys = {}
    if not os.path.exists(KEYS_FOLDER):
        raise FileNotFoundError(f"[Missing] KEYS_FOLDER: {KEYS_FOLDER}")
    for key_file in os.listdir(KEYS_FOLDER):
        if key_file.endswith(".txt"):
            with open(os.path.join(KEYS_FOLDER, key_file), "r") as f:
                keys[key_file[:-4]] = f.read().strip()
    if not keys:
        raise ValueError("[Empty] No keys loaded. Please add key files.")
    return keys

def load_prompts() -> Dict[str, str]:
    """
    Load prompt templates from the PROMPTS_FOLDER.

    Returns:
        Dict[str, str]: Mapping of prompt names to their contents.
    """
    prompts = {}
    if not os.path.exists(PROMPTS_FOLDER):
        raise FileNotFoundError(f"[Missing] PROMPTS_FOLDER: {PROMPTS_FOLDER}")
    for prompt_file in os.listdir(PROMPTS_FOLDER):
        if prompt_file.endswith(".txt"):
            with open(os.path.join(PROMPTS_FOLDER, prompt_file), "r") as f:
                prompts[prompt_file[:-4]] = f.read().strip()
    if not prompts:
        raise ValueError("[Empty] No prompts loaded. Please add prompt files.")
    return prompts

# === Load keys, prompts, and models immediately ===
KEYS = load_keys()
PROMPTS = load_prompts()
LLM_MODEL = GeminiModel(
    LLM_MODEL_NAME,
    provider=GoogleGLAProvider(api_key=KEYS["google_gla"]),
)
PROMPTS["llm_system"] = PROMPTS["llm_system"].replace("{MIN_CLIP_LEN}", str(MIN_CLIP_LEN)).replace("{MAX_CLIP_LEN}", str(MAX_CLIP_LEN))

# === Data Models ===
class MusicDescriptionResponse(BaseModel):
    """
    Response model for music description generated by Gemini.

    Attributes:
        reasoning (str): Explanation or analysis of the music.
        total_duration (int): Total duration of the audio track in seconds.
        section_times (List[int]): Start times of music sections.
        section_titles (List[str]): Titles for each music section.
        section_descriptions (List[str]): Descriptions for each section.
        video_clip_start_times (List[int]): Start times for video clips.
        video_prompts (List[str]): Text prompts for generating video clips.
    """
    reasoning: str
    total_duration: int
    section_times: List[int]
    section_titles: List[str]
    section_descriptions: List[str]
    video_clip_start_times: List[int]
    video_prompts: List[str]

def create_folders() -> None:
    """
    Ensure required folders exist. If not, create them.
    """
    for folder in [INPUT_FILES_FOLDER, OUTPUT_FILES_FOLDER, KEYS_FOLDER, PROMPTS_FOLDER]:
        if not os.path.exists(folder):
            os.makedirs(folder)
            print(f"[Created] {folder}")
    # Warn user about missing keys/prompts
    if not os.listdir(KEYS_FOLDER):
        print(f"[Warning] Add API key files (*.txt) to {KEYS_FOLDER}.")
    if not os.listdir(PROMPTS_FOLDER):
        print(f"[Warning] Add prompt files (*.txt) to {PROMPTS_FOLDER}.")

def cleanup() -> None:
    """
    Remove generated video and cache files from the output folder.
    """
    removed = 0
    for file in os.listdir(OUTPUT_FILES_FOLDER):
        if file.endswith((".mp4", ".pkl")):
            os.remove(os.path.join(OUTPUT_FILES_FOLDER, file))
            removed += 1
    print(f"[Cleanup] Removed {removed} files from {OUTPUT_FILES_FOLDER}.")